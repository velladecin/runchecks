#!/usr/bin/perl
use strict;
use warnings;
use EV;
use Readonly;
use Data::Dumper;
use Log::Dispatch;
use Log::Dispatch::File;
use FindBin;
use lib $FindBin::Bin . '/lib';
use utils;

(my $SELF = $0) =~ s|^.*/||;
Readonly my $LOG_FILE => "/var/log/${SELF}.log";
Readonly my $MODS_DIR => $FindBin::Bin . '/checks'; # install should create this
Readonly my $CONF_DIR => $FindBin::Bin . '/conf';   # ditto


#
# Main

my ($SINGLE, $BACKGROUND, $DEBUG, $HELP) =
    _process_args(@ARGV);

if ($HELP) {
    print <<"USAGE";
Usage: $SELF <option> [ <option> .. ]
Options:
    -1|--single-run         run once and exit
    -b|--background         run as a daemon
    -d|--debug              force daemon + all modules found to run in debug mode
    -h|--help               show this helpful message
USAGE

    exit 0;
}

my $LOG;
if ($SINGLE) {
    for my $mod (_get_mods_defs()) {
        my $conf = $mod->{conf};
        my $exec = $mod->{exec};

        # is this bit of a hack..? :0
        my ($log, $loglvl, $logmsg, $cmd) = $exec->($conf->{exec});
        print "$logmsg\n";
    }

    exit 0;
}

my %EVENT_WATCHERS;
if ($BACKGROUND) {
    $LOG = load_logger();
    load_event_watchers();
    EV::run();
}




#
# Subs

sub load_event_watchers {
    my $reload = shift;

    if ($reload) {
        _log( ['Stopping all event watchers..'] );
        _stop_event_watchers();
    }

    _log( ['Starting all event watchers..'] );
    _start_event_watchers();

    1;
}

sub _process_args {
    my @argv = @_;

    my $single = my $background = my $debug = my $help = 0;

    while (my $a = shift @argv) {
        ($a eq '-1' || $a eq '--single-run') and do { $single++ };
        ($a eq '-b' || $a eq '--background') and do { $background++ };
        ($a eq '-d' || $a eq '--debug')      and do { $debug++ };
        ($a eq '-h' || $a eq '--help')       and do { $help++ };
    }

    die "Cannot run foreground & background process at the same time"
        if $single && $background;

    $help++ unless
        $single || $background || $help;

    return($single, $background, $debug, $help);
}

sub _get_mods_defs {
    my $watch_files = shift;

    my $dh;
    opendir $dh, $MODS_DIR or die "Cannot process checks: $!";

    my @mods;
    for my $file (readdir $dh) {
        next if $file =~ /^\./;
        next if $file =~ /~$/;
        next if $file eq 'README';

        my $mod_file = $MODS_DIR .'/'. $file;

        # source modules here
        my $mod = eval { do $mod_file };
        if ($@ || ref $mod ne 'HASH') {
            _log( ["Could not load module '$file': $@"], {lvl=>'critical'} );
            die $@;
        }
        if (
            (!$mod->{conf}          || ref $mod->{conf} ne 'HASH')          ||
            (!$mod->{conf}{daemon}  || ref $mod->{conf}{daemon} ne 'HASH')  ||
            (!$mod->{exec}          || ref $mod->{exec} ne 'CODE')
        ){
            _log( ["Invalid module definition in '$file'"], {lvl=>'critical'} );
            die;
        }

        # add more compulsory options here
        # daemon
        for ( qw(frequency) ) {
            die "Missing compulsory conf directive '$_' for mod '$file'"
                unless $mod->{conf}{daemon}{$_};
        }
        # exec
        # ...

        if ($watch_files) {
            $EVENT_WATCHERS{file}{$mod_file} =
                EV::stat($mod_file, 0, sub {
                    _log( ["Caught file change: $mod_file"], {lvl=>'warn'} );
                    # XXX what to do now? :)
                });
        }

        push @mods, $mod;
        _log( ["Loaded module '$file'"] );
    }

    closedir $dh;
    return @mods;
}

sub _start_event_watchers {
    my $watch_check_files = 1;

    my @periodic;
    for my $mod ( _get_mods_defs($watch_check_files) ) {
        my $conf = $mod->{conf};
        my $exec = $mod->{exec};

        # run in debug mode
        $conf->{exec}{debug} = $DEBUG
            if $DEBUG;

        # EV callback
        my $sub = sub {
            # @return fields:
            # log (0/1), log level, log msg, command to execute
            my ($log, $loglvl, $logmsg, $cmd) = $exec->($conf->{exec});
            _log( [$logmsg], {lvl=>$loglvl} ) if $log;

            qx($cmd) if $cmd;

            1;
        };

        my $fr = utils::get_time_seconds( $conf->{daemon}{frequency} );
        my $at = defined( $conf->{daemon}{first_run} ) # can be '0'
            ? utils::get_time_seconds($conf->{daemon}{first_run})
            : int( rand $fr );

        push @periodic,
            EV::periodic( $at, $fr, 0, $sub );
    }

    my @signals = (
        EV::signal( 'HUP',  sub { _log( ['Detected HUP signal event, reloading..'] ); _reload(); } ),
        EV::signal( 'INT',  sub { _log( ['Detected INT signal event, exiting..'  ] );  _stop(1); } ),
        EV::signal( 'TERM', sub { _log( ['Detected TERM signal event, exiting..' ] );  _stop(1); } ),
    );

    $EVENT_WATCHERS{periodic} = [ @periodic ];
    $EVENT_WATCHERS{signal}   = [ @signals ];

    1;
}
sub _stop_event_watchers {
    my @events;
    for my $type (keys %EVENT_WATCHERS) {
        my @e = $type eq 'file'
            ? values %{ $EVENT_WATCHERS{$type} }
            : @{ $EVENT_WATCHERS{$type} };

        push @events, @e;
    }

    # stop
    $_->stop() for @events;
    # destroy
    %EVENT_WATCHERS = ();

    1;
}

sub _log {
    my ($msg, $ref) = @_;
    my $m = join ' ', @$msg;

    $LOG->log(
        message => $m,
        level => lc( $ref->{lvl} || 'info' ),
        type => 'file',
    )
    if $LOG;

    print "$m\n" if $DEBUG && $SINGLE;
}

sub load_logger {
    my $log = Log::Dispatch->new( callbacks=>sub{
            my %log = @_;
            my $lvl = uc $log{level};
            my $msg = $log{message};
            my $now = scalar( localtime time );

            return "[$now][$lvl]  $msg\n";
        }
    );
    $log->add(
        Log::Dispatch::File->new(
            name => 'file',
            filename => $LOG_FILE,
            min_level => 'info',
            mode => 'append',
            buffered => 0,
        ),
    );

    $log->log( message=>'Loading logger..', level=>'info', type=>'file' );
    return $log;
}

sub _reload { load_event_watchers(1); }
sub _stop {
    my $exit = shift;

    _stop_event_watchers();

    exit 0 if $exit;
}
